import React, { useState } from 'react';
import { ChevronRight, Star, Zap, Users, Brain, Heart, Trophy, Sparkles } from 'lucide-react';

const EntaneerQuizApp = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [language, setLanguage] = useState('');
  const [englishName, setEnglishName] = useState('');
  const [thaiName, setThaiName] = useState('');
  const [answers, setAnswers] = useState({});
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [scores, setScores] = useState({ selfConfidence: 0, connectivity: 0, problemSolver: 0 });
  const [selectedAdjective, setSelectedAdjective] = useState('');
  const [futurePersona, setFuturePersona] = useState('');

  const content = {
    thai: {
      selectLanguage: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ / Select Language",
      thai: "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
      english: "English",
      enterName: "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      englishNameLabel: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
      thaiNameLabel: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
      startQuiz: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
      quizTitle: "‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! üöÄ",
      quizSubtitle: "‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£ ENTANEER ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
      next: "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
      previous: "‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
      finish: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
      yourResult: "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! üéâ",
      dominantTrait: "‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:",
      scoreBreakdown: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
      selfConfidence: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á",
      connectivity: "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
      problemSolver: "‡∏ô‡∏±‡∏Å‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á",
      futurePersonaPrompt: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï?",
      futurePersonaPlaceholder: "‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå...",
      selectAdjective: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∏‡∏ì‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:",
      createPersona: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏≠‡∏£‡πå‡πÇ‡∏ã‡∏ô‡∏≤",
      yourPersona: "‡πÄ‡∏û‡∏≠‡∏£‡πå‡πÇ‡∏ã‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
      inspiration: "‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì:",
      welcomeMessage: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ENTANEER ‡∏ó‡∏µ‡πà‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà! üéì\n\n‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà!",
      questions: [
        {
          q: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞:",
          options: [
            "‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
            "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô",
            "‡∏Ñ‡πâ‡∏ô‡∏Ñ‡∏ß‡πâ‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå"
          ]
        },
        {
          q: "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ù‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:",
          options: [
            "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
            "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏™‡∏´‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
            "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏£‡∏¥‡∏á"
          ]
        },
        {
          q: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞:",
          options: [
            "‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ",
            "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô",
            "‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"
          ]
        },
        {
          q: "‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞:",
          options: [
            "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à",
            "‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°",
            "‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
          ]
        },
        {
          q: "‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏Ñ‡∏∑‡∏≠:",
          options: [
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏•‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏¥‡∏®‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°"
          ]
        },
        {
          q: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏à‡∏≠‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞:",
          options: [
            "‡∏≠‡∏î‡∏ó‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô",
            "‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏µ‡∏°",
            "‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢"
          ]
        },
        {
          q: "‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠:",
          options: [
            "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
            "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á",
            "‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏ß‡∏±‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
          ]
        },
        {
          q: "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà:",
          options: [
            "‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥",
            "‡∏ô‡∏≥‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            "‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"
          ]
        },
        {
          q: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ü‡∏±‡∏á ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ô‡πâ‡∏ô:",
          options: [
            "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á",
            "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô",
            "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"
          ]
        }
      ]
    },
    english: {
      selectLanguage: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ / Select Language",
      thai: "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
      english: "English",
      enterName: "Enter Your Name",
      englishNameLabel: "Your Nickname",
      thaiNameLabel: "Thai Nickname",
      startQuiz: "Start Quiz",
      quizTitle: "Discover Your Engineer Identity! üöÄ",
      quizSubtitle: "Answer the questions to find your ENTANEER engineering persona",
      next: "Next",
      previous: "Previous",
      finish: "Finish",
      yourResult: "Your Results! üéâ",
      dominantTrait: "Your dominant trait is:",
      scoreBreakdown: "Your scores:",
      selfConfidence: "Self-Confidence",
      connectivity: "Connectivity",
      problemSolver: "Problem Solver & Change Maker",
      futurePersonaPrompt: "What kind of engineer do you want to be in the future?",
      futurePersonaPlaceholder: "e.g., A creative and visionary engineer...",
      selectAdjective: "Select the adjective that best describes you:",
      createPersona: "Create Persona",
      yourPersona: "Your Persona:",
      inspiration: "Inspiration for you:",
      welcomeMessage: "Welcome to The ENTANEER Journey at Chiang Mai University! üéì\n\nLecturers and staff at the Engineering Faculty are ready to support you throughout this journey. Let's build a great future together!",
      questions: [
        {
          q: "When facing a complex engineering problem, you typically:",
          options: [
            "Break it down methodically and analyze each component systematically",
            "Reach out to colleagues and form a team to tackle it together",
            "Research similar problems and brainstorm innovative solutions"
          ]
        },
        {
          q: "Your ideal engineering project would involve:",
          options: [
            "Optimizing an existing system to achieve maximum efficiency",
            "Collaborating with interdisciplinary teams from different countries",
            "Developing a solution that addresses a real-world social issue"
          ]
        },
        {
          q: "When learning new technology, you prefer to:",
          options: [
            "Study the fundamentals thoroughly before applying them",
            "Learn through online communities and peer discussions",
            "Experiment hands-on and discover practical applications"
          ]
        },
        {
          q: "In group presentations, you usually:",
          options: [
            "Prepare detailed analysis and present with confidence",
            "Facilitate discussions and ensure everyone contributes",
            "Focus on demonstrating real-world impact and implementation"
          ]
        },
        {
          q: "Your biggest motivation as an engineer is:",
          options: [
            "Mastering complex technical skills and achieving personal excellence",
            "Building networks and working with diverse teams globally",
            "Creating solutions that make a meaningful difference in society"
          ]
        },
        {
          q: "When a project hits obstacles, you tend to:",
          options: [
            "Persist with determination and find alternative approaches",
            "Seek advice from mentors and collaborate with team members",
            "Pivot quickly and adapt the solution to overcome challenges"
          ]
        },
        {
          q: "Your preferred work environment is:",
          options: [
            "A well-equipped lab where you can focus on detailed analysis",
            "An open collaborative space with constant team interaction",
            "A dynamic setting where you can prototype and test solutions"
          ]
        },
        {
          q: "You're most proud of engineering work that:",
          options: [
            "Demonstrates technical excellence and precision",
            "Brings together people from different backgrounds successfully",
            "Solves problems others thought were impossible"
          ]
        },
        {
          q: "When explaining your engineering work to others, you emphasize:",
          options: [
            "The technical methodology and rigorous analysis involved",
            "The collaborative process and diverse perspectives incorporated",
            "The real-world problems solved and positive changes created"
          ]
        }
      ]
    }
  };

  const adjectives = {
    selfConfidence: {
      thai: [
        { thai: "‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ", english: "Analytical" },
        { thai: "‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö", english: "Methodical" },
        { thai: "‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô", english: "Determined" },
        { thai: "‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥", english: "Precise" },
        { thai: "‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", english: "Systematic" },
        { thai: "‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô", english: "Resilient" },
        { thai: "‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ò‡∏¥", english: "Focused" },
        { thai: "‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î", english: "Rigorous" },
        { thai: "‡∏≠‡∏î‡∏ó‡∏ô", english: "Persistent" },
        { thai: "‡∏û‡∏¥‡∏ñ‡∏µ‡∏û‡∏¥‡∏ñ‡∏±‡∏ô", english: "Meticulous" }
      ],
      english: ["Analytical", "Methodical", "Determined", "Precise", "Systematic", "Resilient", "Focused", "Rigorous", "Persistent", "Meticulous"]
    },
    connectivity: {
      thai: [
        { thai: "‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠", english: "Collaborative" },
        { thai: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á", english: "Networked" },
        { thai: "‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£", english: "Communicative" },
        { thai: "‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß", english: "Adaptive" },
        { thai: "‡πÇ‡∏•‡∏Å‡∏Å‡∏ß‡πâ‡∏≤‡∏á", english: "Global" },
        { thai: "‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£", english: "Integrative" },
        { thai: "‡∏™‡∏±‡∏á‡∏Ñ‡∏°", english: "Social" },
        { thai: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏™‡∏∞‡∏û‡∏≤‡∏ô", english: "Bridge-building" },
        { thai: "‡∏ó‡∏π‡∏ï", english: "Diplomatic" },
        { thai: "‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏Å‡∏•‡∏°‡∏Å‡∏•‡∏∑‡∏ô", english: "Harmonizing" }
      ],
      english: ["Collaborative", "Networked", "Communicative", "Adaptive", "Global", "Integrative", "Social", "Bridge-building", "Diplomatic", "Harmonizing"]
    },
    problemSolver: {
      thai: [
        { thai: "‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°", english: "Innovative" },
        { thai: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", english: "Transformative" },
        { thai: "‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö", english: "Impactful" },
        { thai: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå", english: "Creative" },
        { thai: "‡∏õ‡∏è‡∏¥‡∏ß‡∏±‡∏ï‡∏¥", english: "Revolutionary" },
        { thai: "‡∏ö‡∏∏‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å", english: "Pioneering" },
        { thai: "‡∏°‡∏µ‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå", english: "Visionary" },
        { thai: "‡∏û‡∏•‡∏ß‡∏±‡∏ï", english: "Dynamic" },
        { thai: "‡∏°‡∏∏‡πà‡∏á‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤", english: "Solution-oriented" },
        { thai: "‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", english: "Change-driving" }
      ],
      english: ["Innovative", "Transformative", "Impactful", "Creative", "Revolutionary", "Pioneering", "Visionary", "Dynamic", "Solution-oriented", "Change-driving"]
    }
  };

  const getHighestScoringCategory = () => {
    const maxScore = Math.max(scores.selfConfidence, scores.connectivity, scores.problemSolver);
    if (scores.selfConfidence === maxScore) return 'selfConfidence';
    if (scores.connectivity === maxScore) return 'connectivity';
    return 'problemSolver';
  };

  const getCategoryName = (category) => {
    const names = {
      selfConfidence: content[language].selfConfidence,
      connectivity: content[language].connectivity,
      problemSolver: content[language].problemSolver
    };
    return names[category];
  };

  const getInspirationMessage = () => {
    const category = getHighestScoringCategory();
    const messages = {
      thai: {
        selfConfidence: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á! üí™",
        connectivity: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ! ü§ù",
        problemSolver: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà! üåü"
      },
      english: {
        selfConfidence: "Start with your determination to learn and grow into a confident expert! üí™",
        connectivity: "Start by making new friends and grow into a leader who connects people and technology! ü§ù",
        problemSolver: "Start with your curiosity and grow into a great change maker! üåü"
      }
    };
    return messages[language][category];
  };

  const handleLanguageSelect = (lang) => {
    setLanguage(lang);
    setCurrentStep(1);
  };

  const handleNameSubmit = () => {
    if (englishName.trim()) {
      setCurrentStep(2);
    }
  };

  const handleAnswerSelect = (questionIndex, answerIndex) => {
    setAnswers({ ...answers, [questionIndex]: answerIndex });
  };

  const handleNextQuestion = () => {
    if (currentQuestion < content[language].questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      // Calculate scores
      let selfConfidence = 0, connectivity = 0, problemSolver = 0;
      Object.values(answers).forEach(answer => {
        if (answer === 0) selfConfidence++;
        else if (answer === 1) connectivity++;
        else if (answer === 2) problemSolver++;
      });
      setScores({ selfConfidence, connectivity, problemSolver });
      setCurrentStep(3);
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const handleCreatePersona = () => {
    if (selectedAdjective && futurePersona.trim()) {
      setCurrentStep(5);
    }
  };

  // Step 0: Language Selection
  if (currentStep === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-pink-500 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 max-w-md w-full text-center transform hover:scale-105 transition-all duration-300">
          <div className="mb-8">
            <Sparkles className="mx-auto text-6xl text-purple-500 mb-4" />
            <h1 className="text-2xl font-bold text-gray-800 mb-2">ENTANEER Quiz</h1>
            <p className="text-gray-600">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ / Select Language</p>
          </div>
          <div className="space-y-4">
            <button
              onClick={() => handleLanguageSelect('thai')}
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white py-4 rounded-2xl font-semibold text-lg hover:from-blue-600 hover:to-purple-600 transform hover:scale-105 transition-all duration-200 shadow-lg"
            >
              üáπüá≠ ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            </button>
            <button
              onClick={() => handleLanguageSelect('english')}
              className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-4 rounded-2xl font-semibold text-lg hover:from-purple-600 hover:to-pink-600 transform hover:scale-105 transition-all duration-200 shadow-lg"
            >
              üá∫üá∏ English
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Step 1: Name Input
  if (currentStep === 1) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 max-w-md w-full">
          <div className="text-center mb-8">
            <Heart className="mx-auto text-6xl text-pink-500 mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">{content[language].enterName}</h2>
          </div>
          <div className="space-y-4">
            <div>
              <label className="block text-gray-700 font-semibold mb-2">{content[language].englishNameLabel}</label>
              <input
                type="text"
                value={englishName}
                onChange={(e) => setEnglishName(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 text-lg"
                placeholder="John, Mary, Alex..."
              />
            </div>
            {language === 'thai' && (
              <div>
                <label className="block text-gray-700 font-semibold mb-2">{content[language].thaiNameLabel}</label>
                <input
                  type="text"
                  value={thaiName}
                  onChange={(e) => setThaiName(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 text-lg"
                  placeholder="‡πÇ‡∏à‡πâ, ‡πÅ‡∏°‡∏£‡∏µ‡πà, ‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ã‡πå..."
                />
              </div>
            )}
            <button
              onClick={handleNameSubmit}
              disabled={!englishName.trim()}
              className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-4 rounded-2xl font-semibold text-lg hover:from-green-600 hover:to-blue-600 transform hover:scale-105 transition-all duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
            >
              {content[language].startQuiz} üöÄ
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Step 2: Quiz Questions
  if (currentStep === 2) {
    const question = content[language].questions[currentQuestion];
    const progress = ((currentQuestion + 1) / content[language].questions.length) * 100;

    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 max-w-2xl w-full">
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-2xl font-bold text-gray-800">{content[language].quizTitle}</h2>
              <span className="text-lg font-semibold text-purple-600">{currentQuestion + 1}/9</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
              <div 
                className="bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-500"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <p className="text-gray-600">{content[language].quizSubtitle}</p>
          </div>

          <div className="mb-8">
            <h3 className="text-xl font-semibold text-gray-800 mb-6">{question.q}</h3>
            <div className="space-y-3">
              {question.options.map((option, index) => (
                <button
                  key={index}
                  onClick={() => handleAnswerSelect(currentQuestion, index)}
                  className={`w-full p-4 rounded-2xl text-left transition-all duration-200 transform hover:scale-102 ${
                    answers[currentQuestion] === index
                      ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg'
                      : 'bg-gray-100 hover:bg-gray-200 text-gray-800'
                  }`}
                >
                  <span className="font-medium">{String.fromCharCode(65 + index)}) </span>
                  {option}
                </button>
              ))}
            </div>
          </div>

          <div className="flex justify-between">
            <button
              onClick={handlePreviousQuestion}
              disabled={currentQuestion === 0}
              className="px-6 py-3 bg-gray-300 text-gray-700 rounded-2xl font-semibold hover:bg-gray-400 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {content[language].previous}
            </button>
            <button
              onClick={handleNextQuestion}
              disabled={answers[currentQuestion] === undefined}
              className="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-2xl font-semibold hover:from-purple-600 hover:to-pink-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {currentQuestion === content[language].questions.length - 1 ? content[language].finish : content[language].next}
              <ChevronRight size={20} />
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Step 3: Results
  if (currentStep === 3) {
    const highestCategory = getHighestScoringCategory();
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-400 via-orange-500 to-red-500 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 max-w-2xl w-full">
          <div className="text-center mb-8">
            <Trophy className="mx-auto text-6xl text-yellow-500 mb-4" />
            <h2 className="text-3xl font-bold text-gray-800 mb-2">{content[language].yourResult}</h2>
            <p className="text-xl text-gray-600">
              {language === 'thai' && thaiName ? `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${thaiName}!` : `Hello ${englishName}!`}
            </p>
          </div>

          <div className="mb-8">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">{content[language].dominantTrait}</h3>
            <div className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-6 rounded-2xl text-center">
              <h4 className="text-2xl font-bold">{getCategoryName(highestCategory)}</h4>
            </div>
          </div>

          <div className="mb-8">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">{content[language].scoreBreakdown}</h3>
            <div className="space-y-3">
              <div className="flex items-center justify-between bg-blue-100 p-4 rounded-2xl">
                <span className="font-semibold flex items-center gap-2">
                  <Brain className="text-blue-500" size={20} />
                  {content[language].selfConfidence}
                </span>
                <span className="text-xl font-bold text-blue-600">{scores.selfConfidence}</span>
              </div>
              <div className="flex items-center justify-between bg-green-100 p-4 rounded-2xl">
                <span className="font-semibold flex items-center gap-2">
                  <Users className="text-green-500" size={20} />
                  {content[language].connectivity}
                </span>
                <span className="text-xl font-bold text-green-600">{scores.connectivity}</span>
              </div>
              <div className="flex items-center justify-between bg-orange-100 p-4 rounded-2xl">
                <span className="font-semibold flex items-center gap-2">
                  <Zap className="text-orange-500" size={20} />
                  {content[language].problemSolver}
                </span>
                <span className="text-xl font-bold text-orange-600">{scores.problemSolver}</span>
              </div>
            </div>
          </div>

          <button
            onClick={() => setCurrentStep(4)}
            className="w-full bg-gradient-to-r from-yellow-500 to-orange-500 text-white py-4 rounded-2xl font-semibold text-lg hover:from-yellow-600 hover:to-orange-600 transform hover:scale-105 transition-all duration-200 shadow-lg"
          >
            {content[language].next} ‚ú®
          </button>
        </div>
      </div>
    );
  }

  // Step 4: Future Persona & Adjective Selection
  if (currentStep === 4) {
    const highestCategory = getHighestScoringCategory();
    const availableAdjectives = language === 'thai' 
      ? adjectives[highestCategory].thai 
      : adjectives[highestCategory].english;

    return (
      <div className="min-h-screen bg-gradient-to-br from-teal-400 via-blue-500 to-indigo-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 max-w-2xl w-full">
          <div className="text-center mb-8">
            <Star className="mx-auto text-6xl text-yellow-500 mb-4" />
            <h2 className="text-2xl font-bold text-gray-800">Create Your Future ENTANEER! üåü</h2>
          </div>

          <div className="mb-8">
            <label className="block text-gray-700 font-semibold mb-4">{content[language].futurePersonaPrompt}</label>
            <textarea
              value={futurePersona}
              onChange={(e) => setFuturePersona(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 text-lg h-32 resize-none"
              placeholder={content[language].futurePersonaPlaceholder}
            />
          </div>

          <div className="mb-8">
            <label className="block text-gray-700 font-semibold mb-4">{content[language].selectAdjective}</label>
            <div className="grid grid-cols-2 gap-3">
              {language === 'thai' 
                ? availableAdjectives.map((adj, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedAdjective(adj.english)}
                      className={`p-3 rounded-2xl text-center transition-all duration-200 ${
                        selectedAdjective === adj.english
                          ? 'bg-gradient-to-r from-teal-500 to-blue-500 text-white shadow-lg'
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-800'
                      }`}
                    >
                      <div className="font-semibold">{adj.thai}</div>
                      <div className="text-sm opacity-75">({adj.english})</div>
                    </button>
                  ))
                : availableAdjectives.map((adj, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedAdjective(adj)}
                      className={`p-3 rounded-2xl text-center transition-all duration-200 font-semibold ${
                        selectedAdjective === adj
                          ? 'bg-gradient-to-r from-teal-500 to-blue-500 text-white shadow-lg'
                          : 'bg-gray-100 hover:bg-gray-200 text-gray-800'
                      }`}
                    >
                      {adj}
                    </button>
                  ))
              }
            </div>
          </div>

          <button
            onClick={handleCreatePersona}
            disabled={!selectedAdjective || !futurePersona.trim()}
            className="w-full bg-gradient-to-r from-teal-500 to-blue-500 text-white py-4 rounded-2xl font-semibold text-lg hover:from-teal-600 hover:to-blue-600 transform hover:scale-105 transition-all duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
          >
            {content[language].createPersona} üéØ
          </button>
        </div>
      </div>
    );
  }

  // Step 5: Final Persona & Inspiration
  if (currentStep === 5) {
    const personaName = `The ${selectedAdjective} ${englishName}`;
    const inspirationMessage = getInspirationMessage();

    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-400 via-purple-500 to-indigo-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 max-w-2xl w-full text-center">
          <div className="mb-8">
            <Sparkles className="mx-auto text-6xl text-purple-500 mb-4" />
            <h2 className="text-3xl font-bold text-gray-800 mb-4">{content[language].yourPersona}</h2>
            <div className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-6 rounded-2xl">
              <h3 className="text-3xl font-bold">{personaName}</h3>
            </div>
          </div>

          <div className="mb-8 text-left">
            <h4 className="text-xl font-semibold text-gray-800 mb-4">{content[language].inspiration}</h4>
            <div className="bg-yellow-100 p-6 rounded-2xl border-l-4 border-yellow-500">
              <p className="text-lg text-gray-800 font-medium">{inspirationMessage}</p>
            </div>
          </div>

          <div className="mb-8 text-left">
            <h4 className="text-xl font-semibold text-gray-800 mb-4">Your Future Vision:</h4>
            <div className="bg-blue-100 p-6 rounded-2xl border-l-4 border-blue-500">
              <p className="text-lg text-gray-800">{futurePersona}</p>
            </div>
          </div>

          <div className="bg-gradient-to-r from-green-100 to-blue-100 p-6 rounded-2xl border border-green-300">
            <h4 className="text-xl font-semibold text-gray-800 mb-4">üéì Welcome Message</h4>
            <p className="text-gray-800 whitespace-pre-line">{content[language].welcomeMessage}</p>
          </div>

          <div className="mt-8 text-gray-600">
            <p className="text-sm">
              {language === 'thai' 
                ? 'üåü ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô ENTANEER ‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà!'
                : 'üåü Good luck on your journey to becoming a great ENTANEER!'
              }
            </p>
          </div>
        </div>
      </div>
    );
  }

  return null;
};

ReactDOM.render(React.createElement(EntaneerQuizApp), document.getElementById('root'));
